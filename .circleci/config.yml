## automatisation de deployement

version: 2.1

## section de commande de factorisation de code
commands:
    destroy_network:    ## job de suppression de la  pile du réseau cloudformation
      steps:
        - run:
            name: destroy infrastructure
            when: on_fail
            command: echo "bravo, vous avez échoué le réseau"
#            command: aws cloudformation delete-stack --stack-name networkinfra-${CIRCLE_PROJECT_REPONAME}

    destroy_servers:    ## job de suppression de la pile des serveurs cloudformation
      steps:
        - run:
            name: destroy infrastructure
            when: on_fail
            command: echo "bravo, vous avez échoué le server"
#            command: aws cloudformation delete-stack --stack-name serverinfra-${CIRCLE_PROJECT_REPONAME}

## Dockers image
python_ansible: &python_ansible
    docker:
      - image: python:3.9-bullseye

alpine: &alpine     ## image de alpine
    docker:
      - image: alpine:latest

aws_cli: &aws_cli     ## image du cli d'amazon
    docker: 
      - image: amazon/aws-cli

################# section de des jobs ###############

jobs:
    create_network_infra:
        <<: *aws_cli
        steps:
          - checkout
          - run: 
                name: create network stack cloudformation
                command: |
                    aws cloudformation deploy --stack-name networkinfra-${CIRCLE_PROJECT_REPONAME} \
                    --template-file .circleci/aws_config/networkinfrastructure.yml
#                    --parameter-overrides aws_config/networkparameter.json
          - destroy_network  # rollback if fail

    create_server_infra:
        <<: *aws_cli
        steps:
          - checkout
          - run:
                name: create server stack cloudformation
                command: |
                    aws cloudformation deploy --stack-name serverinfra-${CIRCLE_PROJECT_REPONAME} \
                    --template-file .circleci/aws_config/serverinfrastructure.yml
          - destroy_network   # rollback if fail
          - destroy_servers   # rollback if fail

    write_inventory:
        <<: *aws_cli
        steps:
          - run:  # write inventory file
                name: write inventory file
                command: |
                    echo "[web]" > inventory.txt && \
                    aws ec2 describe-instances --query \
                    "Reservations[*].Instances[*].PublicIpAddress"  \
                    --output text >> inventory.txt
          - run: mkdir workspace && yum install tar -y && yum install gzip -y
          - persist_to_workspace:
                root: .circleci/
                paths:
                  - inventory.txt
          - destroy_network   # rollback if fail
          - destroy_servers   # rollback if fail

### Deploy in infrastructure

    deploy_server:
        <<: *python_ansible
        steps:
          - checkout
          - attach_workspace:
                at: ~/
          - run: yum install tar -y && cat inventory.txt
          - add_ssh_keys: 
                fingerprints: "3d:d8:77:38:1a:5e:75:7a:9d:d8:13:37:de:57:e7:23"
          - run:
                name: install ansible
                command: |
                    apt-get update && apt-get install ansible -y
          - run:
                name: run playbook
                command: ansible-playbook .circleci/main.yml -i inventory.txt
          - destroy_network   # rollback if fail
          - destroy_servers   # rollback if fail

### section de smoke test
    smoke_test:
        <<: *aws_cli
        steps:
          - run: 
                name: run test
                command: |
                    URL=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
                    if curl -s --head $URL
                        then
                          echo "It's work!"
                    else
                          echo "It's failled"
                    fi
          - destroy_network   # rollback if fail
          - destroy_servers   # rollback if fail               

################# Workflow section #################

workflows:
  cd_workflow:
    jobs:
      - create_network_infra
      - create_server_infra:
          requires:
            - create_network_infra
      - write_inventory:
          requires:
            - create_server_infra
      - deploy_server:
          requires:
            - create_server_infra
            - write_inventory
      - smoke_test:
          requires:
            - deploy_server
      
